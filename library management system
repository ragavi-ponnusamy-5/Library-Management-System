#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Constants
#define MAX_BOOKS 100
#define TITLE_LENGTH 50
#define AUTHOR_LENGTH 50

// Book structure
typedef struct {
    char title[TITLE_LENGTH];
    char author[AUTHOR_LENGTH];
    int isBorrowed; // 0 = available, 1 = borrowed
} Book;

Book library[MAX_BOOKS];
int bookCount = 0;

// Function prototypes
void addBook();
void viewBooks();
void searchBook();
void borrowBook();
void returnBook();
void displayMenu();

// Add a new book to the library
void addBook() {
    if (bookCount >= MAX_BOOKS) {
        printf("Library is full. Cannot add more books.\n");
        return;
    }

    printf("Enter book title: ");
    while (getchar() != '\n'); // Clear the buffer
    fgets(library[bookCount].title, TITLE_LENGTH, stdin);
    library[bookCount].title[strcspn(library[bookCount].title, "\n")] = '\0'; // Remove trailing newline

    printf("Enter book author: ");
    fgets(library[bookCount].author, AUTHOR_LENGTH, stdin);
    library[bookCount].author[strcspn(library[bookCount].author, "\n")] = '\0'; // Remove trailing newline

    library[bookCount].isBorrowed = 0;
    bookCount++;

    printf("Book added successfully!\n");
}

// View all books in the library
void viewBooks() {
    if (bookCount == 0) {
        printf("No books in the library.\n");
        return;
    }

    printf("\n=== Library Books ===\n");
    for (int i = 0; i < bookCount; i++) {
        printf("%d. %s by %s [%s]\n", i + 1, library[i].title, library[i].author,
               library[i].isBorrowed ? "Borrowed" : "Available");
    }
    printf("\n");
}

// Search for a book by title or author
void searchBook() {
    char query[TITLE_LENGTH];
    printf("Enter title or author to search: ");
    while (getchar() != '\n'); // Clear the buffer
    fgets(query, TITLE_LENGTH, stdin);
    query[strcspn(query, "\n")] = '\0'; // Remove trailing newline

    printf("\n=== Search Results ===\n");
    int found = 0;
    for (int i = 0; i < bookCount; i++) {
        if (strstr(library[i].title, query) || strstr(library[i].author, query)) {
            printf("%d. %s by %s [%s]\n", i + 1, library[i].title, library[i].author,
                   library[i].isBorrowed ? "Borrowed" : "Available");
            found = 1;
        }
    }
    if (!found) {
        printf("No books found matching '%s'.\n", query);
    }
}

// Borrow a book
void borrowBook() {
    int bookNumber;
    viewBooks();
    if (bookCount == 0) return;

    printf("Enter the book number to borrow: ");
    scanf("%d", &bookNumber);

    if (bookNumber < 1 || bookNumber > bookCount) {
        printf("Invalid book number.\n");
        return;
    }

    if (library[bookNumber - 1].isBorrowed) {
        printf("Sorry, this book is already borrowed.\n");
    } else {
        library[bookNumber - 1].isBorrowed = 1;
        printf("You have successfully borrowed '%s'.\n", library[bookNumber - 1].title);
    }
}

// Return a borrowed book
void returnBook() {
    int bookNumber;
    viewBooks();
    if (bookCount == 0) return;

    printf("Enter the book number to return: ");
    scanf("%d", &bookNumber);

    if (bookNumber < 1 || bookNumber > bookCount) {
        printf("Invalid book number.\n");
        return;
    }

    if (!library[bookNumber - 1].isBorrowed) {
        printf("This book is not currently borrowed.\n");
    } else {
        library[bookNumber - 1].isBorrowed = 0;
        printf("You have successfully returned '%s'.\n", library[bookNumber - 1].title);
    }
}

// Display the main menu
void displayMenu() {
    int choice;

    do {
        printf("\n=== Library Management System ===\n");
        printf("1. Add Book\n");
        printf("2. View Books\n");
        printf("3. Search Book\n");
        printf("4. Borrow Book\n");
        printf("5. Return Book\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
                viewBooks();
                break;
            case 3:
                searchBook();
                break;
            case 4:
                borrowBook();
                break;
            case 5:
                returnBook();
                break;
            case 6:
                printf("Exiting the system. Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);
}

// Main function
int main() {
    displayMenu();
    return 0;
}
